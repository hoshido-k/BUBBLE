rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ヘルパー関数
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isFriend(userId) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/friends/$(request.auth.uid + '_' + userId));
    }

    // ユーザーコレクション
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // メッセージコレクション
    match /messages/{messageId} {
      allow read: if isAuthenticated() &&
                    (resource.data.senderId == request.auth.uid ||
                     resource.data.receiverId == request.auth.uid);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.senderId;
      allow update: if isAuthenticated() &&
                      (request.auth.uid == resource.data.senderId ||
                       request.auth.uid == resource.data.receiverId);
      allow delete: if isOwner(resource.data.senderId);
    }

    // 位置情報コレクション（暗号化されたデータ）
    match /locations/{userId} {
      allow read: if isOwner(userId) || isFriend(userId);
      allow write: if isOwner(userId);
    }

    // フレンドコレクション
    match /friends/{friendshipId} {
      allow read: if isAuthenticated() &&
                    (friendshipId.matches('.*' + request.auth.uid + '.*'));
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() &&
                      (friendshipId.matches('.*' + request.auth.uid + '.*'));
      allow delete: if isAuthenticated() &&
                      (friendshipId.matches('.*' + request.auth.uid + '.*'));
    }

    // 通知設定
    match /notification_settings/{userId} {
      allow read, write: if isOwner(userId);
    }
  }
}
